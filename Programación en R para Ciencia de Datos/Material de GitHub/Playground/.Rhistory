c(561, 1105, 1729, 2465, 2821) -> y
y
print(y)
1:100
c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1)
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) - c(1, 2)
ls()
'¡Hola Mundo!'
c('rojo', 'azul', 'verde', 'azul', 'rojo')
c('rojo', 'azul', 'verde', 'azul', 'rojo') -> colores
print(colores)
complejo = 2+1i
complejo <- 2+1i
mi_variable == 15
length(complejo)
length(complejo) <- 3
complejo
2^1024
0/0
fecha_primer_curdo_R <- Sys.Date()
fecha_primer_curso_R <- Sys.Date()
fecha_primer_curso_R
vector(mode = 'numeric, length = 10')
vector(mode = 'numeric', length = 10)
vector('character', 10)
vector('logical', 10)
list(0, 'Hola', T)
list(0, 'Hola', TRUE)
c(T, 19, 1+3i)
c = vector('numeric', 5)
c <- vector('numeric', 5)
c
as.logical(c)
class(c)
as.logical(c)
class(as.logical(c))
m <- matrix(1:12, 4, 3)
m
factor(colores)
data.frame(llave = y, color = colores)
mi_variable <- (180 / 60) -15
mi_variable
mi-vector <- 11:30
mi_vector <- 11:30
mi_vector
mi_vector[3]
mi_vector[1:5]
mi_vector[c(4, 6, 13)]
mi_vector[c(6, 13, 4)]
mi_vector[[3]]
mi_vector[c(-9:-15)]
mi_vactor[rep(c(T, F), 10)]
mi_vector[rep(c(T, F), 10)]
mi_vector[rep(c(TRUE, FALSE), 10)]
mi_vector[c(FALSE, FALSE, TRUE)]
mi_vector > 20
mi_vector[mi_vector > 20]
mi_vector[(mi_vector > 20)]
mi_arreglo <- array(c(1:18), dim=c(3, 3, 2))
mi_arreglo
mi_arreglo[1,3, 2]
mi_arreglo[1:2, 1:2, 1]
mi_matriz <- matrix(c(1: 9), 3, 3)
mi_matriz[1, ]
mi_matriz[ , 1]
mi_matriz[2:3, ]
mi_matriz[c(1, 3), ]
carro <- list(color='rojo', nllantas=4, marca='Renault', ncilindros=4)
carro$color
carro[c('ncilindros', "nllantas")]
carro[['marca']]
carro[['mar']]
carro[['mar', exact=F]]
carro[['mar', exact=FALSE]]
carro
camioneta <- list(color='azul', nllantas=4, marca='BMW', ncilindros=6)
cochera <- list(carro, camioneta)
cochera
cochere[[c(2, 1)]]
cochera[[c(2, 1)]]
cars
cars$speed
cars['dist'] > 100
cars$dist > 100
cars[cars$dist > 100]
cars$speed[cars$dist > 100]
read.table('swirl_temp/inmigintnalpry.csv', header=TRUE, sep=',', fileEncoding = 'latin1')
read.table('swirl_temp/inmigintnalpry.csv', header=TRUE, sep=',', fileEncoding = 'latin1') -> datos
datos_2 <- read.table('swirl_temp/inmigintnalpry.csv', sep = ',', header=TRUE)
ok()
datos_2 <- read.table('swirl_temp/inmigintnalpry.csv', sep = ',', header=TRUE, fileEncoding = 'UTF-8')
View(datos)
inicial <- read.table('swirl_temp/inmigintnalpry.csv', sep=',', header=TRUE, fileEncoding = 'latin1', nrows = 100)
clases <- sapply(inicial, class)
clases
datos <- read.table(file = 'swirl_temp/inmigintnalpry.csv', sep = ',', header = TRUE, fileEncoding = 'latin1', colClasses = clases)
save(datos, clases, file='swirl_temp/datos_inmigrantes.RData')
save(datos, clases, file='swirl_temp/datos_inmigrates.RData')
rm(clases, datos)
rm(datos, clases)
ls()
load('swirl_temp/datos_inmigrates.RData')
ls()
write.table(dato, file='swirl_temp/datos.txt')
write.table(datos, file='swirl_temp/datos.txt')
swirl()
library(swirl)
select_language()
swirl()
swirl()
help('apply')
mi_matriz <- matrix(1.16, nrow = 4, ncol = 4)
mi_matriz <- matrix(1:16, nrow = 4, ncol = 4)
mi_matriz
apply(mi_matriz, 2, min)
play()
mi_matriz
apply(mi_matriz, c(2,1), min)
apply(mi_matriz, c(1, 2), min)
apply(mi_matriz, c(1), min)
apply(mi_matriz, c(2), min)
nxt()
apply(mi_matriz, c(1), min)
apply(mi_matriz, 1, min)
mi_lista <- list('Introducción', 'a', 'la', 'Programación', 'Estadística', 'con', 'R')
mi_lista
formals(lapply)
mayusculas <- lapply(mi_lista, toupper)
mayusculas
class(mayusculas)
asa_datos = read.csv(file = 'swirl_temp/ASA_estadisticasPasajeros(3).csv', header = TRUE, sep = ',')
asa_datos
asa_datos = read.csv('swirl_temp/ASA_estadisticasPasajeros(3).csv', header = TRUE, sep = ',')
asa_datos = read.table('swirl_temp/ASA_estadisticasPasajeros(3).csv', header = TRUE, sep = ',')
asa_datos = read.csv('swirl_temp/ASA_estadisticasPasajeros(3).csv', header = TRUE)
info()
asa_datos
asa_datos = read.csv("swirl_temp/ASA_estadisticasPasajeros(3).csv")
rm(asa_datos)
asa_datos
asa_datos <- read.csv(file = "swirl_temp/ASA_estadisticasPasajeros(3).csv", header = T, sep = ',')
asa_datos <- read.csv(file = "swirl_temp/ASA_estadisticasPasajeros(3).csv", header = T)
asa_datos <- read.csv(file = "swirl_temp/ASA_estadisticasPasajeros(3).csv", header = TRUE)
asa_datos
View(asa_datos)
lapply(asa_datos, class)
play()
asa_datos
b <- lapply(asa_datos, )
lapply(asa_datos, class)
b <- lapply(asa_datos, c(2:4), as.factor)
b <- lapply(asa_datos, as.factor)
b
class(a)
class(asa_datos)
apply(asa_datos, c(2:4), as.factor)
apply(asa_datos, 2, as.factor)
nxt()
asa_datos$Descripcion
unique(asa_datos$Descripcion)
unique(asa_datos[Estado])
unique(asa_datos['Estado'])
unique(asa_datos$Estado)
unique(asa_datos[['Estado']])
sum(asa_datos[['Pasajeros.nacionales']])
sum(asa_datos$Pasajeros.nacionales)
asa_pasajeros <- asa_datos[, c('Pasajeros.nacionales', 'Pasajeros.internacionales')]
View(asa_pasajeros)
lapply(asa_pasajeros, sum)
total_pasajers <- sapply(asa_pasajeros, sum)
rm(total_pasajers)
total_pasajeros <- sapply(asa_pasajeros, sum)
total_pasajeros
table(asa_datos$Estado)
tapply(asa_datos$Pasajeros.nacionales, asa_satos$Estados, sum)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estados, sum)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, sum)
tapply(asa_datos[['Pasajeros.nacionales']], asa_datos[['Estado']], mean)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, mean)
tapply(asa_datos$Pasajeros.nacionales, asa_datos[['Codigo.IATA']], mean)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Codigo.IATA, mean)
help('apply')
mi_matriz <- matrix(data = 1:16, nrow = 4, ncol = 4)
mi_matriz
apply(x = mi_matriz, 2, min)
apply(X = mi_matriz, MARGIN = 2, FUN = min)
apply(X = mi_matriz, MARGIN = 1, FUN = min)
mi_lista <- list("Introducción", "a", "la", "Programación", "Estadística", "con", "R")
mi_lista
lapply(X = mi_lista, FUN = toupper)
formals(toupper)
formals(lapply(list, function))
formals(lapply
)
lapply(X = mi_lista, FUN = toupper)
lapply(mi_lista, toupper)
mayusculas <- lapply(X = mi_lista, FUN = toupper)
mayusculas
class(mayusculas)
asa_datos <- read.csv(file = 'swirl_temp/ASA_estadisticasPasajeros(3).csv', header = TRUE)
View(asa_datos)
lapply(asa_datos, class)
asa_datos$Descripcion
unique(asa_datos$Descripcion)
unique(asa_datos$Estado)
sum(asa_datos$Pasajeros.nacionales)
asa_pasajeros <- asa_datos[, c('Pasajeros.nacionales', 'Pasajeros.internacionales')]
asa_pasajeros
asa_pasajeros
View(asa_pasajeros)
lapply(asa_pasajeros, sum)
total_pasajeros <- sapply(asa_pasajeros, sum)
asa_pasajeros
total-pasajeros
total_pasajeros
table(asa_datos$Estado)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Estado, sum)
tapply(asa_datos$Pasajeros.nacionales, asa_datos$Codigo.IATA, mean)
install.packages('xlsx')
library(xlsx)
debug(utils:::unpackPkgZip)
library('xlsx')
install.packages('readxl')
library(swirl)
select_language()
swirl()
help("plot")
plot(c(1, 3), c(1, 8), type = 'n', xlab = 'Serie X', ylab = 'Serie Y')
x <- c(1, 2, 3)
y <- c(1, 2, 8)
points(x, y)
mi_linea <- lm(y ~ x)
class(mi_linea)
abline(mi_linea)
mi_linea
lines(c(1, 3), c(2, 3))
lines(c(1, 3), c(2, 3), col='green')
plot(iris)
plot(iris[['SepalLength']], iris[['Sepal.Width']])
plot(iris[['Sepal.Length']], iris[['Sepal.Width']])
mtcars
dotchart(mtcars$mpg, labels = row.names(mtcars))
boxplot(mpg~cyl, data = mtcars)
swirl()
demo(graphics)
play()
demo(graphics)
par(opar)
nxt()
plot(1:5)
plot(c(1, 2, 3), c(4, 5, 6))
?plot
plot(c(1, 2, 3,), c(4, 5, 6), type='l')
plot(c(1, 2, 3), c(4, 5, 6), type='l')
plot(6:10, type='s')
plot(1:10, type='b')
plot(1.5, main='Mi gráfica', sub='¿Y qué tanto?')
plot(1:5, main='Mi gráfica')
plot(1:5, main='Mi gráfica', xlab='x', ylab='y')
points(c(1, 5), c(4, 2), col='green')
lines(c(1, 4), c(2, 5), col='yellow')
abline(h=3, col='red', lty=2)
abline(h=1:5, v=1:5, col='purple')
data('iris')
force(iris)
class(iris)
play()
View(iris)
nxt()
head(iris)
plot(iris)
plot(iris$Petal.Lengthm iris$Petal.Width)
plot(iris$Petal.Lengthm, iris$Petal.Width)
plot(iris$Petal.Length, iris$Petal.Width)
hist(iris$Sepal.Length, col='red')
hist(iris$Sepal.Length, col="red")
hist(iris$Petal.Length, col='red')
hist(iris$Petal.Length, col='red', freq=F)
hist(iris$Petal.Length, col='red', freq=FALSE)
hist(iris$Petal.Length, col='red, braks=5')
hist(iris$Petal.Length, col='red', braks=5)
hist(iris$Petal.Length, col='red', breaks=5)
?boxplot
boxplot(Sepal.Width ~ Species, data=iris, col=2:3)
boxplot(Sepal.Width ~ Species, data=iris, col=2:4)
pie(c(50, 50, 50), labels=levels=(iris$Species))
pie(c(50, 50, 50), labels=levels(iris$Species))
help("par")
View(mtcars)
par()
hist(mtcas$mpg)
hist(mtcars$mpg)
par()
par(col.lab='red')
param_orig <- par()
par(col.lab='red')
ist(mtcars$mpg)
hist(mtcars$mpg)
par(param_orig)
par(cex.main=4)
hist(mtcars$mpg)
par(cex.main=2)
hist(mtcars$mpg)
par(family='serif')
hist(mtcars$mpg)
par(family='sans')
hist(mtcars$mpg)
plot(1:10, 1:10, type='n')
text(3,3, "¡Hola, mundo! Fuente por omisión.")
text(4, 4, family='sans', "¡Hola, mundo! con sans.")
text(5, 5, family='serif', "¡Hola, mundo! Con serif.")
text(6, 6, family='mono', '¡Hola, mundo! Con mono', color=7)
text(6, 6, family='mono', '¡Hola, mundo! Con mono', col=7)
text(6, 6, family='mono', '¡Hola, mundo! Con mono', col=6)
swirl()
?par
par()
par_orig <- par()
par('col')
par(col='blue')
iris
data('iris')
ploT(iris)
plot(iris)
par(col)
par('col')
plot(iris, col=iris$Species)
j
iris$Sepal.Length
View(iris)
c('Sepal.Length', 'Sepal.Width', 'Petal.Lengt', 'Petal.Width', 'Species')
info()
iris(colnames())
colnames(iris)
nxt()
par()
colnames(iris)
nxt()
name(iris)
names(iris)
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species)
par(pch=15)
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species, pch='A')
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species)
plot(1:26, pch=0.25)
plot(1:26, pch=0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species, psch=21, bg='blue')
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species, pch=21, bg='blue')
plot(iris$Sepal.Length, iris$Petal.Length, col=iris$Species, cex=2)
legend(x=4.5, y=7, legend=levels(iris$Species), col=c(1:3), pch=16)
par(par_orig)
colors()
help("grep")
grep('yellow', colors(), value=TRUE)
length(colors())
palette()
plot(1:8, col=1:8, main='Colores por índice', pch=17, cex=3)
plot(1:12, col=1.12, main='Colores reciclados', cex=3, pch=18)
plot(1:12, col=1:12, main='Colores reciclados', cex=3, pch=18)
plot(1:12, col=1:12, main='Colores reciclados', pch=18, cex=3)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette()
plot(1:10, col=1:10, main='Paleta Arcoiris', pch=17, cex=3)
paleta_calida <- heat.colors(10)
palette(paleta_calida)
plot(1:10, col=1:10, main='Paleta Cálida', pch=17, cex=3)
mi_paleta <- c('red', 'green', '#0019FF')
mi_paleta <- c('red', 'green', '#0019FFFF')
plot(1:10, col=mi_paleta, main='Mi Paleta', pch=17, cex=3)
palette(mi_paleta)
plot(1:10, col=1:10, main='Mi Paleta', pch=17, cex=3)
palette('default')
plot(x=20, y=20, type='n')
plot(1:20, type='n')
text(5, 5, '¡Hola Mundo!')
help("text")
text(11, 11, '¡Hola Mundo! x2', cex=2)
text(7, 7, "¡Hola Mundo con Serif!", family='serif')
text(9, 9, '¡Hola Mundo con Mono!', family='mono')
text(13, 13, '¡Hola Mundo con Sans!', family='sans')
demo(plotmath)
plot(1:10, type='n', main=expression(alpha + beta))
plot(1:10, type='n', xlab=expression(paste('Valores de ', x^phi1)))
?pltmath
?plotmath
t <- 10
plot(1:t, main=substitute(paste('La gráfica del vector 1:', x), list(x=t)))
t <- 20
plot(1:t, main=substitute(paste('La gráfica del vector 1:', x), list(x=t)))
?substitute
install.packages('rgl')
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x, y)
library('rgl')
library(rgl)
open3d()
options(rgl.debug = TRUE)
library(rgl)
help(swirl)
??swirl
conjunto <- c('mundo', 'hola', 'ejemplo', 'grep')
grep('hola, conjunto')
grep('hola', conjunto)
grep('o', conjunto)
nchar('Paralelepípedo')
nchar(conjunto)
paste(conjunto)
apply(conjunto, paste)
lapply(conjunto, paste)
sapply(conjunto, paste)
paste(conjunto, sep=',')
for (string in conjunto){}
for (string in conjunto){
paste(string)
}
for string in conjunto{
'hola' in conjunto
'hola' IN conjunto
paste('Esta', 'es', 'una', 'cadena', 'de', 'caracteres.')
a = as.list(conjunto)
a
paste(a)
rm(a)
rm(string)
paste('Esta', 'es', 'una', 'cadena', 'de', 'caracteres.', sep=',')
i <-9
sprintf('El cuadrado de %d es %d', i, i^2)
sprintf('El cuadrado de %c es %d', i, i^2)
strsplit('Esta es una cadena de caracteres', ' ')
help(regexp)
regexpr('[aeiou]', 'El murciélago quedó encerrado dentro del paralelepípedo.')
gregexpr('[aeiou]', 'El murciélago quedó encerrado dentro del paralelepípedo.')
gregexpr('[aeiou]', 'El murciélago quedó encerrado dentro del paralelepípedo.')
swirl()
library(swirl)
ls()
rm(c(conjunto, i))
rm(c('conjunto', 'i'))
rm(conjunto, i)
ls()
library(swirl)
select_language()
swirl()
texto <- '¡Hola Mundo!'
texto[1]
texto[2]
help8substring
help("substring")
substring(texto, 7, 11)
substring(texto, 7, 11) <- 'Swirl'
texto
nchar(texto)
paste('¡Adiós', 'Mundo!')
paste('¡Adiós', 'Mundo!', sep='_')
i <- 9
sprintf('El cuadrado de %d es %d', i, i^2)
?sprintf
play()
t <- 'Hola'
sprintf('El cuadrado de %s es %d', t, i)
sprintf('El cuadrado de %s es %d', i, i)
sprintf('El cuadrado de %s es %d', i, i^2)
rm(t)
nxt()
strsplit('Me/gusta/programar/en/R', '/')
chartr('o', 'a', '¡Hola Mundo!')
patron <- 'H(a|ä|ae)ndel'
musicos
grep(patron, musicos)
nuevo_patron <- '.(a|ä|se)ndel'
nuevo_patron <- '.(a|ä|ae|e)ndel'
grep(nuevo_patron, musicos)
regexpr((patron, musicos))
regexpr(patron, musicos)
gregexpr(patron, 'Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.')
?regexpr
library(ggplot2)
data("iris")
View(iris)
data("diamonds")
View(diamonds)
ser.seed(100)
set.seed(100)
dchico <- diamonds[sample(nrow(diamonds), 100), ]
qplot(carat, price, data=diamonds)
qplot(carat, price, data=dchico)
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price, data=dchico, color=color)
qplot(carat, price, data=dchico, color=cut)
qplot(carat, price, data=dchico, shape=cut)
qplot(carat, price, data=dchico, shape=cut)
qplot(carat, price, data=dchico, shape=cut, color=color)
qplot(carat, price, data=dchico, shape=cut, color=cut)
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, alpha=I(1/1))
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, size=table, color=table)
help(ggplot2)
help("install.packages")
help("unique")
help('which')
getwd()
setwd('/Users/nrojas/Documents/Diplomado_Big_Data_Data_Science/Programación en R para Ciencia de Datos/Material de GitHub/Playground')
getwd()
